#!/usr/bin/env bash

set -eo pipefail

env_dir=$1/env
cache_dir=$2
launch_dir=$3

# TODO: 
jdk_version=1.8.0_131
jdk_url=https://java-buildpack.cloudfoundry.org/openjdk/trusty/x86_64/openjdk-${jdk_version}.tar.gz
gradle_version=4.10
gradle_url=https://services.gradle.org/distributions/gradle-${gradle_version}-bin.zip
invoker_version=0.0.7
invoker_url=http://repo.spring.io/libs-milestone-local/io/projectriff/java-function-invoker/${invoker_version}/java-function-invoker-${invoker_version}-exec.jar

# Load user-provided build-time environment variables
if compgen -G "$env_dir/*" > /dev/null; then
    for var in "$env_dir"/*; do
        declare "$(basename "$var")=$(<"$var")"
    done
fi

# If it doesn't exist locally, create a JDK cache layer with
# POSIX-style root for launch (bin, lib, etc).
# This makes java available to subsequent buildpacks as well.
if [[ -f $cache_dir/java.toml ]]; then
    cached_jdk_version=$(cat "$cache_dir/java.toml" | yj -t | jq -r .version)
    echo "Found cached OpenJDK $cached_jdk_version"
fi
if [[ $jdk_version != $cached_jdk_version ]] ; then
    echo "Downloading OpenJDK $jdk_version"
    rm -rf "$cache_dir/java"
    mkdir "$cache_dir/java"
    wget -q -O - "$jdk_url" | tar -xzf - -C "$cache_dir/java" --strip-components=1
    echo "version = \"$jdk_version\"" > "$cache_dir/java.toml"
fi

# If it doesn't exist remotely, create a JDK launch layer with
# POSIX-style root for launch (bin, lib, etc).
if [[ -f $launch_dir/java.toml ]]; then
    launch_jdk_version=$(cat "$launch_dir/java.toml" | yj -t | jq -r .version)
fi
if [[ $jdk_version != $launch_jdk_version ]] ; then
    mkdir "$launch_dir/java"
    cp -r "$cache_dir/java"//{bin,lib} "$launch_dir/java/"
    cp "$cache_dir/java.toml" "$launch_dir/java.toml"
fi

# If it doesn't exist locally, create a Gradle cache layer with
# POSIX-style root for launch (bin, lib, etc).
# This makes mvn available to subsequent buildpacks as well.
if [[ -f $cache_dir/gradle.toml ]]; then
    cached_gradle_version=$(cat "$cache_dir/gradle.toml" | yj -t | jq -r .version)
    echo "Found cached Gradle $cached_gradle_version"
fi
if [[ $gradle_version != $cached_gradle_version ]] ; then
    echo "Downloading Gradle $gradle_version"
    rm -rf "$cache_dir/gradle"
    wget -q -O gradle.zip "$gradle_url"
    unzip -q gradle.zip -d "$cache_dir"
    mv "$cache_dir/gradle-${gradle_version}" "$cache_dir/gradle"
    rm gradle.zip
    echo "version = \"$gradle_version\"" > "$cache_dir/gradle.toml"
fi

# Make java, mvn etc. accessible in this script
export PATH=$PATH:$cache_dir/java/bin:$cache_dir/gradle/bin

# Build function
gradle clean build --no-daemon -x test
jar=$(ls build/libs/*.jar)
echo "Built $jar"

echo "Adding Java invoker $invoker_version"
# Add function invoker
wget -q "$invoker_url" -O build/libs/java-function-invoker-${invoker_version}-exec.jar

echo "Adding function $jar"
# Set default start command
FUNCTION_HANDLER=$(cat "riff.toml" | yj -t | jq -r .handler)
echo "Setting function handler to $FUNCTION_HANDLER"
echo "processes = [{ type = \"web\", command = \"java -jar build/libs/java-function-invoker-${invoker_version}-exec.jar --function.uri=file://\$PWD/$jar?handler=${FUNCTION_HANDLER:-functions.Function} --riff.function.invoker.protocol=http\"}]" > "$launch_dir/launch.toml"
